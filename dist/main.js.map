{"version":3,"sources":["webpack://Defend-My-Food/./src/scripts/utilities.js","webpack://Defend-My-Food/./src/scripts/board.js","webpack://Defend-My-Food/./src/scripts/projectile.js","webpack://Defend-My-Food/./src/scripts/goku.js","webpack://Defend-My-Food/./src/scripts/naruto.js","webpack://Defend-My-Food/./src/index.js","webpack://Defend-My-Food/./src/scripts/game.js"],"names":["CELLSIZE","createMap","ctx","fillStyle","fillRect","canvas","width","height","collision","first","second","x","y","mouse","undefined","this","document","getElementById","getContext","addEventListener","e","offsetX","offsetY","strokeStyle","strokeRect","power","speed","beginPath","arc","Math","PI","fill","projectiles","shooting","timer","health","font","fillText","floor","push","Projectile","movement","random","maxHealth","GAMEGRID","GOKUS","NARUTOS","MONEY","frame","gameOver","Cell","createGrid","gridPostitionX","gridPostitionY","i","length","Goku","animate","clearRect","draw","handleGameGrid","shoot","j","splice","handleGokus","shootNE","shootSE","shootNW","shootSW","handleProjectiles","move","Naruto","handleNarutos","requestAnimationFrame","game"],"mappings":"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","file":"main.js","sourcesContent":["// import { handleGameGrid } from './board';\n// import { handleGokus } from './goku';\n\nconst CELLSIZE = 50;\n\n\n  export function createMap(ctx) {\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(0, CELLSIZE, canvas.width - CELLSIZE * 4, CELLSIZE);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(\n      canvas.width - CELLSIZE * 4,\n      CELLSIZE,\n      CELLSIZE,\n      canvas.height - CELLSIZE * 2\n    );\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(\n      CELLSIZE,\n      canvas.height - CELLSIZE * 2,\n      canvas.width - CELLSIZE * 4,\n      CELLSIZE\n    );\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE, CELLSIZE * 4, CELLSIZE, CELLSIZE * 6);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE, CELLSIZE * 4, CELLSIZE * 11, CELLSIZE);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE * 11, CELLSIZE * 4, CELLSIZE, CELLSIZE * 4);\n  }\n\nexport function collision(first, second) {\n  if (\n    !(\n      first.x > second.x + second.width ||\n      first.x + first.width < second.x ||\n      first.y > second.y + second.height ||\n      first.y + first.height < second.y\n    )\n  ) {\n    return true;\n  }\n}\n","const CELLSIZE = 50;\n\nimport { collision } from './utilities';\n\nconst mouse = {\n  x: undefined,\n  y: undefined,\n  width: 0.1,\n  height: 0.1,\n};\n\n// let canvasPosition = canvas.getBoundingClientRect();\n// canvas.addEventListener(\"mousemove\", function (e) {\n//   // mouse.x = e.x - canvasPosition.left;\n//   mouse.x = e.offsetX;\n//   mouse.y = e.offsetY;\n//   // mouse.y = e.y - canvasPosition.top;\n// });\n\n// canvas.addEventListener(\"mouseleave\", function () {\n//   mouse.x = undefined;\n//   mouse.y = undefined;\n// });\n\n\nclass Cell {\n  constructor(x, y) {\n    this.canvas = document.getElementById('canvas')\n    this.ctx = this.canvas.getContext('2d')\n    this.x = x;\n    this.y = y;\n    this.width = CELLSIZE;\n    this.height = CELLSIZE;\n    this.canvas.addEventListener(\"mousemove\", function (e) {\n      mouse.x = e.offsetX;\n      mouse.y = e.offsetY;\n    });\n\n    this.canvas.addEventListener(\"mouseleave\", function () {\n      mouse.x = undefined;\n      mouse.y = undefined;\n    });\n  }\n  draw() {\n    if (mouse.x && mouse.y && collision(this, mouse)) {\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.strokeRect(this.x, this.y, this.width, this.height);\n    }\n  }\n}\n\n\nexport default Cell\n","import {projectiles } from './goku';\n\nclass Projectile {\n    constructor(x, y) {\n        this.canvas = document.getElementById(\"canvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.x = x;\n        this.y = y;\n        this.width = 15;\n        this.height = 15;\n        this.power = 25;\n        this.speed = 7;\n    }\n\n    shootNE() {\n        this.y -= this.speed;\n        this.x += this.speed;\n    }\n    shootSE() {\n        this.y += this.speed;\n        this.x += this.speed;\n    }\n    shootNW() {\n        this.y -= this.speed;\n        this.x -= this.speed;\n    }\n    shootSW() {\n        this.y += this.speed;\n        this.x -= this.speed;\n    }\n\n\n    draw() {\n        this.ctx.fillStyle = 'aqua';\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, this.width, 0 , Math.PI*2);\n        this.ctx.fill();\n    }\n}\n\nexport default Projectile","import Projectile from './projectile';\n\nconst CELLSIZE = 50;\nexport const projectiles = []\nconst CELLGAP = 3;\nconst GAMEGRID = [];\nconst GOKUS = [];\nlet MONEY = 1000;\n\nconst mouse = {\n  x: undefined,\n  y: undefined,\n  width: 0.1,\n  height: 0.1,\n};\n\nclass Goku {\n  constructor(x, y) {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.x = x;\n    this.y = y;\n    this.width = 49;\n    this.height = 49;\n    this.shooting = false;\n    this.projectiles = [];\n    this.timer = 0;\n    this.health = 100\n     \n  }\n  draw() {\n    this.ctx.fillStyle = \"blue\";\n    this.ctx.fillRect(this.x, this.y, this.width, this.height);\n    this.ctx.fillStyle = \"gold\";\n    this.ctx.font = \"10px Arial\";\n        this.ctx.fillText(\n          Math.floor(this.health) + \"HP\",\n          this.x + 12,\n          this.y + 10\n        );\n    this.ctx.fillText(\"Goku\", this.x + 15, this.y + 30);\n  }\n\n  shoot() {\n    this.timer++;\n    if (this.timer % 50 === 0) {\n      projectiles.push(new Projectile(this.x + 70, this.y + 25))\n    }\n  }\n}\n\n\n// export function handleGokus() {\n//   for (let i = 0; i < GOKUS.length; i++) {\n//     GOKUS[i].draw();\n//   }\n// }\n\n\nexport default Goku\n\n\n //  this.canvas.addEventListener(\"mousemove\", function (e) {\n      //    mouse.x = e.offsetX;\n      //    mouse.y = e.offsetY;\n      //  });\n\n      //  this.canvas.addEventListener(\"mouseleave\", function () {\n      //    mouse.x = undefined;\n      //    mouse.y = undefined;\n      //  });\n      //  this.canvas.addEventListener(\"click\", function () {\n      //    const gridPostitionX = mouse.x - (mouse.x % CELLSIZE);\n      //    const gridPostitionY = mouse.y - (mouse.y % CELLSIZE);\n      //    if (gridPostitionY < CELLSIZE) return;\n      //    for (let i = 0; i < GOKUS.length; i++) {\n      //      if (GOKUS[i].x === gridPostitionX && GOKUS[i].y === gridPostitionY) return;\n      //    }\n      //    let gokuCost = 100;\n      //    if (MONEY >= gokuCost) {\n      //      GOKUS.push(new Goku(gridPostitionX, gridPostitionY));\n      //      MONEY -= gokuCost;\n      //    }\n      //  });","const CELLSIZE = 50;\n\nclass Naruto {\n    constructor() {\n        this.canvas = document.getElementById(\"canvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.x = 0;\n        this.y = 0;\n        this.width = 49;\n        this.height = 49;\n        this.speed = 1\n        this.movement = this.speed;\n        this.health = Math.floor(Math.random() * 400) + 50;\n        this.maxHealth = this.health;\n\n    }\n\n    move() {\n        // this.y += 1;\n        if (this.x >= 0 && this.x <= CELLSIZE*15 && this.y === 0) {\n            this.x += this.movement\n        }\n\n        if (this.x === CELLSIZE*15 && this.y >= 0  && this.y <= CELLSIZE*11) {\n            this.y += this.movement\n        }\n\n        if (this.y === CELLSIZE*11 && this.x <= CELLSIZE*15  && this.x >= 0) {\n            this.x -= this.movement\n        }\n\n        if (this.y <= CELLSIZE*11 && this.y >= CELLSIZE*3  && this.x === 0) {\n            this.y -= this.movement\n        }\n\n        if (this.y === CELLSIZE*3 && this.x >= 0  && this.x <= CELLSIZE*12) {\n            this.x += this.movement\n        }\n\n        if (this.y >= CELLSIZE*3 && this.y <= CELLSIZE*8  && this.x === CELLSIZE*12) {\n            this.y += this.movement\n        }\n\n        if (this.y === CELLSIZE*8 && this.x <= CELLSIZE*12  && this.x >= CELLSIZE*6) {\n            this.x -= this.movement\n        }\n    \n    }\n\n    draw() {\n        this.ctx.fillStyle = \"black\";\n        this.ctx.fillRect(this.x, this.y, this.width, this.height);\n        this.ctx.fillStyle = \"orange\";\n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillText(Math.floor(this.health)+\"HP\", this.x + 12, this.y + 10);\n        this.ctx.fillText(\"Naruto\", this.x + 12, this.y + 30);\n\n    }\n}\n\nexport default Naruto","import {game} from './scripts/game';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"canvas\");\n  canvas.width = 900;\n  canvas.height = 600;\n  const ctx = canvas.getContext(\"2d\");\n\n\n  game(canvas, ctx);\n\n})\n\n\n","// import { animate } from './utilities';\nimport Cell from \"./board\";\nimport Goku, { projectiles } from \"./goku\";\nimport Naruto from './naruto';\nimport Projectile from './projectile'\nimport { collision, createMap } from \"./utilities\";\n\nexport function game(canvas, ctx) {\n     const CELLSIZE = 50;\n     const CELLGAP = 3;\n     const GAMEGRID = [];\n     const GOKUS = [];\n     const NARUTOS = [];\n     let MONEY = 1000;\n     let frame = 0;\n     let gameOver = false;\n    //  const projectiles = [];\n\n     // mouse\n     const mouse = {\n       x: undefined,\n       y: undefined,\n       width: 0.1,\n       height: 0.1,\n     };\n\n     canvas.addEventListener(\"mousemove\", function (e) {\n       mouse.x = e.offsetX;\n       mouse.y = e.offsetY;\n     });\n\n     canvas.addEventListener(\"mouseleave\", function () {\n       mouse.x = undefined;\n       mouse.y = undefined;\n     });\n     // board\n\n     function createGrid() {\n       for (let y = 0; y < canvas.height; y += CELLSIZE) {\n         for (let x = 0; x < canvas.width - CELLSIZE * 2; x += CELLSIZE) {\n           GAMEGRID.push(new Cell(x, y));\n         }\n       }\n     }\n\n     createGrid();\n\n     function handleGameGrid() {\n       for (let i = 0; i < GAMEGRID.length; i++) {\n         GAMEGRID[i].draw();\n       }\n     }\n\n     // projectiles\n\n     function handleProjectiles() {\n       for (let i = 0; i < projectiles.length; i++) {\n         if (i % 2 === 0) {\n           projectiles[i].shootNE();\n         }\n         if (i % 3 === 0) {\n           projectiles[i].shootSE();\n         }\n         if (i % i === 0 && i%2 !== 0 && i%3 !== 0) {\n           projectiles[i].shootNW();\n         }\n         if (i % 5 === 0) {\n           projectiles[i].shootSW();\n         }\n         else {projectiles[i].shootNW();}\n\n         projectiles[i].draw();\n\n         for (let j = 0; j < NARUTOS.length; j++) {\n           if (NARUTOS[j] && projectiles[i] && collision(projectiles[i], NARUTOS[j])) {\n             NARUTOS[j].health -= projectiles[i].power\n             projectiles.splice(i, 1);\n             i--;\n           }\n         }\n\n         if (projectiles[i] && projectiles[i].x > canvas.width - CELLSIZE) {\n           projectiles.splice(i, 1);\n           i--;\n         }\n       }\n     }\n\n     // gokus\n\n     canvas.addEventListener(\"click\", function () {\n       const gridPostitionX = mouse.x - (mouse.x % CELLSIZE);\n       const gridPostitionY = mouse.y - (mouse.y % CELLSIZE);\n       if (gridPostitionX > canvas.width - CELLSIZE * 3) return;\n       for (let i = 0; i < GOKUS.length; i++) {\n         if (GOKUS[i].x === gridPostitionX && GOKUS[i].y === gridPostitionY)\n           return;\n       }\n       let gokuCost = 250;\n       if (MONEY >= gokuCost) {\n         GOKUS.push(new Goku(gridPostitionX, gridPostitionY));\n         MONEY -= gokuCost;\n       }\n     });\n\n     function handleGokus() {\n       for (let i = 0; i < GOKUS.length; i++) {\n         GOKUS[i].draw();\n         GOKUS[i].shoot();\n         for (let j = 0; j < NARUTOS.length; j++) {\n           if (GOKUS[i] && collision(GOKUS[i], NARUTOS[j])) {\n             GOKUS[i].health -= .2\n           }\n           if (GOKUS[i].health <= 0) {\n             GOKUS.splice(i, 1);\n             i--;\n           }\n         }\n       }\n     }\n\n     // narutos\n\n     function handleNarutos() {\n        for (let i = 0; i < NARUTOS.length; i++) {\n            NARUTOS[i].move();\n            NARUTOS[i].draw();\n            if (NARUTOS[i].x === CELLSIZE*6 && NARUTOS[i].y === CELLSIZE*8) {\n              gameOver = true\n            }\n            if (NARUTOS[i].health <= 0) {\n              NARUTOS.splice(i, 1);\n              i--;\n              MONEY+=100\n            }\n        }\n        if (frame % 200 === 0) {\n            NARUTOS.push(new Naruto())\n        }\n     }\n\n     // resources\n\n     // utilities\n\n     function handleGameStatus() {\n       if (MONEY > 400) {\n         ctx.fillStyle = \"green\";\n         ctx.font = \"15px Arial\";\n       } else {\n         ctx.fillStyle = \"red\";\n         ctx.font = \"15px Arial\";\n       }\n       ctx.fillText(\"Money: $\" + MONEY, 802, 30);\n       if (gameOver) {\n         ctx.fillStyle = 'black';\n         ctx.font = '60px Fantasy';\n         ctx.fillText(\"Game Over\", 250, 248)\n       }\n     }\n\n     function animate() {\n       ctx.clearRect(0, 0, canvas.width, canvas.height);\n       ctx.fillStyle = \"lightgray\";\n       ctx.fillRect(\n         canvas.width - CELLSIZE * 2,\n         0,\n         CELLSIZE * 2,\n         canvas.height\n       );\n\n       createMap(ctx);\n       handleGameGrid();\n       handleGokus();\n       handleProjectiles();\n       handleNarutos();\n       handleGameStatus(ctx);\n       frame++;       \n       if (!gameOver) requestAnimationFrame(animate);\n     }\n     animate();\n}\n\n\n// export default Game;"],"sourceRoot":""}