{"version":3,"sources":["webpack://Defend-My-Food/./src/scripts/utilities.js","webpack://Defend-My-Food/./src/scripts/board.js","webpack://Defend-My-Food/./src/scripts/goku.js","webpack://Defend-My-Food/./src/index.js"],"names":["CELLSIZE","createMap","ctx","fillStyle","fillRect","canvas","width","height","mouse","x","undefined","y","this","document","getElementById","getContext","addEventListener","e","offsetX","offsetY","first","second","collision","strokeStyle","strokeRect","shooting","projectiles","font","fillText","GAMEGRID","GOKUS","MONEY","push","Cell","createGrid","gridPostitionX","gridPostitionY","i","length","Goku","animate","clearRect","draw","handleGameGrid","handleGokus","requestAnimationFrame"],"mappings":"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","file":"main.js","sourcesContent":["// import { handleGameGrid } from './board';\n// import { handleGokus } from './goku';\n\nconst CELLSIZE = 50;\n\n\n  export function createMap(ctx) {\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(0, CELLSIZE, canvas.width - CELLSIZE * 4, CELLSIZE);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(\n      canvas.width - CELLSIZE * 4,\n      CELLSIZE,\n      CELLSIZE,\n      canvas.height - CELLSIZE * 2\n    );\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(\n      CELLSIZE,\n      canvas.height - CELLSIZE * 2,\n      canvas.width - CELLSIZE * 4,\n      CELLSIZE\n    );\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE, CELLSIZE * 4, CELLSIZE, CELLSIZE * 6);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE, CELLSIZE * 4, CELLSIZE * 11, CELLSIZE);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE * 11, CELLSIZE * 4, CELLSIZE, CELLSIZE * 4);\n  }\n\nexport function collision(first, second) {\n  if (\n    !(\n      first.x > second.x + second.width ||\n      first.x + first.width < second.x ||\n      first.y > second.y + second.height ||\n      first.y + first.height < second.y\n    )\n  ) {\n    return true;\n  }\n}\n","const CELLSIZE = 50;\n\nimport { collision } from './utilities';\n\nconst mouse = {\n  x: undefined,\n  y: undefined,\n  width: 0.1,\n  height: 0.1,\n};\n\n// let canvasPosition = canvas.getBoundingClientRect();\n// canvas.addEventListener(\"mousemove\", function (e) {\n//   // mouse.x = e.x - canvasPosition.left;\n//   mouse.x = e.offsetX;\n//   mouse.y = e.offsetY;\n//   // mouse.y = e.y - canvasPosition.top;\n// });\n\n// canvas.addEventListener(\"mouseleave\", function () {\n//   mouse.x = undefined;\n//   mouse.y = undefined;\n// });\n\n\nclass Cell {\n  constructor(x, y) {\n    this.canvas = document.getElementById('canvas')\n    this.ctx = this.canvas.getContext('2d')\n    this.x = x;\n    this.y = y;\n    this.width = CELLSIZE;\n    this.height = CELLSIZE;\n    this.canvas.addEventListener(\"mousemove\", function (e) {\n      mouse.x = e.offsetX;\n      mouse.y = e.offsetY;\n    });\n\n    this.canvas.addEventListener(\"mouseleave\", function () {\n      mouse.x = undefined;\n      mouse.y = undefined;\n    });\n  }\n  draw() {\n    if (mouse.x && mouse.y && collision(this, mouse)) {\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.strokeRect(this.x, this.y, this.width, this.height);\n    }\n  }\n}\n\n\nexport default Cell\n","const CELLSIZE = 50;\nconst CELLGAP = 3;\nconst GAMEGRID = [];\nconst GOKUS = [];\nlet MONEY = 1000;\n\nconst mouse = {\n  x: undefined,\n  y: undefined,\n  width: 0.1,\n  height: 0.1,\n};\n\nclass Goku {\n  constructor(x, y) {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.x = x;\n    this.y = y;\n    this.width = CELLSIZE;\n    this.height = CELLSIZE;\n    this.shooting = false;\n    this.projectiles = [];\n    // this.timer = 0;\n    // this.health = 100\n     \n  }\n  draw() {\n    this.ctx.fillStyle = \"blue\";\n    this.ctx.fillRect(this.x, this.y, this.width, this.height);\n    this.ctx.fillStyle = \"gold\";\n    this.ctx.font = \"10px Arial\";\n    // this.ctx.fillText(Math.floor(this.health), this.x + 15, this.height + 30);\n    this.ctx.fillText(\"Goku\", this.x + 15, this.y + 30);\n  }\n}\n\n\n// export function handleGokus() {\n//   for (let i = 0; i < GOKUS.length; i++) {\n//     GOKUS[i].draw();\n//   }\n// }\n\n\nexport default Goku\n\n\n //  this.canvas.addEventListener(\"mousemove\", function (e) {\n      //    mouse.x = e.offsetX;\n      //    mouse.y = e.offsetY;\n      //  });\n\n      //  this.canvas.addEventListener(\"mouseleave\", function () {\n      //    mouse.x = undefined;\n      //    mouse.y = undefined;\n      //  });\n      //  this.canvas.addEventListener(\"click\", function () {\n      //    const gridPostitionX = mouse.x - (mouse.x % CELLSIZE);\n      //    const gridPostitionY = mouse.y - (mouse.y % CELLSIZE);\n      //    if (gridPostitionY < CELLSIZE) return;\n      //    for (let i = 0; i < GOKUS.length; i++) {\n      //      if (GOKUS[i].x === gridPostitionX && GOKUS[i].y === gridPostitionY) return;\n      //    }\n      //    let gokuCost = 100;\n      //    if (MONEY >= gokuCost) {\n      //      GOKUS.push(new Goku(gridPostitionX, gridPostitionY));\n      //      MONEY -= gokuCost;\n      //    }\n      //  });","// import './styles/index.css';\n\nimport Game from \"./scripts/game\";\nimport { loadImage } from \"./scripts/image_loader\";\n// import { loadImage } from \"./scripts/image_loader\";\nimport Cell from './scripts/board';\nimport Goku from './scripts/goku';\nimport { createMap } from './scripts/utilities';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"canvas\");\n  canvas.width = 900;\n  canvas.height = 600;\n  const ctx = canvas.getContext(\"2d\");\n\n\n\n  // global variables\n  const CELLSIZE = 50;\n  const CELLGAP = 3;\n  const GAMEGRID = [];\n  const GOKUS = [];\n  let MONEY = 1000;\n\n\n  // mouse\nconst mouse = {\n  x: undefined,\n  y: undefined,\n  width: 0.1,\n  height: 0.1,\n}\n\ncanvas.addEventListener('mousemove', function(e) {\n  mouse.x = e.offsetX\n  mouse.y = e.offsetY\n});\n\ncanvas.addEventListener('mouseleave', function(){\n  mouse.x = undefined;\n  mouse.y = undefined\n})\n  // board\n\n\n  function createGrid() {\n    for (let y = 0; y < canvas.height; y += CELLSIZE) {\n      for (let x = 0; x < canvas.width-CELLSIZE*2; x += CELLSIZE) {\n        GAMEGRID.push(new Cell(x, y));\n      }\n    }\n  }\n\n  createGrid();\n\n\n  function handleGameGrid() {\n    for (let i = 0; i < GAMEGRID.length; i++) {\n      GAMEGRID[i].draw();\n    }\n  }\n\n\n   \n    // projectiles\n\n\n    // gokus\n\n\n    canvas.addEventListener('click', function() {\n      const gridPostitionX = mouse.x - (mouse.x % CELLSIZE);\n      const gridPostitionY = mouse.y - (mouse.y % CELLSIZE);\n      if (gridPostitionX > canvas.width-CELLSIZE*3) return;\n      for (let i = 0; i < GOKUS.length; i++) {\n        if (GOKUS[i].x === gridPostitionX && GOKUS[i].y === gridPostitionY)\n        return;\n      }\n      let gokuCost = 250;\n      if (MONEY >= gokuCost) {\n        GOKUS.push(new Goku(gridPostitionX, gridPostitionY));\n        MONEY -= gokuCost;\n      }\n    });\n\n    function handleGokus() {\n      for (let i = 0; i < GOKUS.length; i++) {\n        GOKUS[i].draw();\n      }\n    }\n\n    // enemies\n\n\n    // resources\n\n\n    // utilities\n\n    function handleGameStatus() {\n      if (MONEY > 400) {\n        ctx.fillStyle = 'green'\n        ctx.font = '15px Arial';\n      } else {\n        ctx.fillStyle = \"red\";\n        ctx.font = \"15px Arial\";\n      }\n      ctx.fillText('Money: $' + MONEY, 802, 30 )\n    }\n\n    function animate() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = \"lightgray\";\n      ctx.fillRect(canvas.width - CELLSIZE * 2, 0, CELLSIZE * 2, canvas.height);\n\n      createMap(ctx);\n      handleGameGrid();\n      handleGokus();\n      handleGameStatus(ctx);\n      requestAnimationFrame(animate);\n    }\n    animate()\n    \n})\n\n\n"],"sourceRoot":""}