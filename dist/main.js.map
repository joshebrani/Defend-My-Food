{"version":3,"sources":["webpack://Defend-My-Food/./src/scripts/utilities.js","webpack://Defend-My-Food/./src/scripts/board.js","webpack://Defend-My-Food/./src/scripts/goku.js","webpack://Defend-My-Food/./src/scripts/naruto.js","webpack://Defend-My-Food/./src/index.js","webpack://Defend-My-Food/./src/scripts/game.js"],"names":["CELLSIZE","createMap","ctx","fillStyle","fillRect","canvas","width","height","mouse","x","undefined","y","this","document","getElementById","getContext","addEventListener","e","offsetX","offsetY","first","second","collision","strokeStyle","strokeRect","shooting","projectiles","font","fillText","verticalPosition","speed","Math","random","movement","health","maxHealth","floor","GAMEGRID","GOKUS","NARUTOS","nPosition","MONEY","frame","push","Cell","createGrid","gridPostitionX","gridPostitionY","i","length","Goku","animate","clearRect","draw","handleGameGrid","handleGokus","update","Naruto","handleNarutos","requestAnimationFrame","game"],"mappings":"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","file":"main.js","sourcesContent":["// import { handleGameGrid } from './board';\n// import { handleGokus } from './goku';\n\nconst CELLSIZE = 50;\n\n\n  export function createMap(ctx) {\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(0, CELLSIZE, canvas.width - CELLSIZE * 4, CELLSIZE);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(\n      canvas.width - CELLSIZE * 4,\n      CELLSIZE,\n      CELLSIZE,\n      canvas.height - CELLSIZE * 2\n    );\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(\n      CELLSIZE,\n      canvas.height - CELLSIZE * 2,\n      canvas.width - CELLSIZE * 4,\n      CELLSIZE\n    );\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE, CELLSIZE * 4, CELLSIZE, CELLSIZE * 6);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE, CELLSIZE * 4, CELLSIZE * 11, CELLSIZE);\n\n    ctx.fillStyle = \"#7cfc00\";\n    ctx.fillRect(CELLSIZE * 11, CELLSIZE * 4, CELLSIZE, CELLSIZE * 4);\n  }\n\nexport function collision(first, second) {\n  if (\n    !(\n      first.x > second.x + second.width ||\n      first.x + first.width < second.x ||\n      first.y > second.y + second.height ||\n      first.y + first.height < second.y\n    )\n  ) {\n    return true;\n  }\n}\n","const CELLSIZE = 50;\n\nimport { collision } from './utilities';\n\nconst mouse = {\n  x: undefined,\n  y: undefined,\n  width: 0.1,\n  height: 0.1,\n};\n\n// let canvasPosition = canvas.getBoundingClientRect();\n// canvas.addEventListener(\"mousemove\", function (e) {\n//   // mouse.x = e.x - canvasPosition.left;\n//   mouse.x = e.offsetX;\n//   mouse.y = e.offsetY;\n//   // mouse.y = e.y - canvasPosition.top;\n// });\n\n// canvas.addEventListener(\"mouseleave\", function () {\n//   mouse.x = undefined;\n//   mouse.y = undefined;\n// });\n\n\nclass Cell {\n  constructor(x, y) {\n    this.canvas = document.getElementById('canvas')\n    this.ctx = this.canvas.getContext('2d')\n    this.x = x;\n    this.y = y;\n    this.width = CELLSIZE;\n    this.height = CELLSIZE;\n    this.canvas.addEventListener(\"mousemove\", function (e) {\n      mouse.x = e.offsetX;\n      mouse.y = e.offsetY;\n    });\n\n    this.canvas.addEventListener(\"mouseleave\", function () {\n      mouse.x = undefined;\n      mouse.y = undefined;\n    });\n  }\n  draw() {\n    if (mouse.x && mouse.y && collision(this, mouse)) {\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.strokeRect(this.x, this.y, this.width, this.height);\n    }\n  }\n}\n\n\nexport default Cell\n","const CELLSIZE = 50;\nconst CELLGAP = 3;\nconst GAMEGRID = [];\nconst GOKUS = [];\nlet MONEY = 1000;\n\nconst mouse = {\n  x: undefined,\n  y: undefined,\n  width: 0.1,\n  height: 0.1,\n};\n\nclass Goku {\n  constructor(x, y) {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.x = x;\n    this.y = y;\n    this.width = CELLSIZE;\n    this.height = CELLSIZE;\n    this.shooting = false;\n    this.projectiles = [];\n    // this.timer = 0;\n    // this.health = 100\n     \n  }\n  draw() {\n    this.ctx.fillStyle = \"blue\";\n    this.ctx.fillRect(this.x, this.y, this.width, this.height);\n    this.ctx.fillStyle = \"gold\";\n    this.ctx.font = \"10px Arial\";\n    // this.ctx.fillText(Math.floor(this.health), this.x + 15, this.height + 30);\n    this.ctx.fillText(\"Goku\", this.x + 15, this.y + 30);\n  }\n}\n\n\n// export function handleGokus() {\n//   for (let i = 0; i < GOKUS.length; i++) {\n//     GOKUS[i].draw();\n//   }\n// }\n\n\nexport default Goku\n\n\n //  this.canvas.addEventListener(\"mousemove\", function (e) {\n      //    mouse.x = e.offsetX;\n      //    mouse.y = e.offsetY;\n      //  });\n\n      //  this.canvas.addEventListener(\"mouseleave\", function () {\n      //    mouse.x = undefined;\n      //    mouse.y = undefined;\n      //  });\n      //  this.canvas.addEventListener(\"click\", function () {\n      //    const gridPostitionX = mouse.x - (mouse.x % CELLSIZE);\n      //    const gridPostitionY = mouse.y - (mouse.y % CELLSIZE);\n      //    if (gridPostitionY < CELLSIZE) return;\n      //    for (let i = 0; i < GOKUS.length; i++) {\n      //      if (GOKUS[i].x === gridPostitionX && GOKUS[i].y === gridPostitionY) return;\n      //    }\n      //    let gokuCost = 100;\n      //    if (MONEY >= gokuCost) {\n      //      GOKUS.push(new Goku(gridPostitionX, gridPostitionY));\n      //      MONEY -= gokuCost;\n      //    }\n      //  });","const CELLSIZE = 50;\n\nclass Naruto {\n    constructor(verticalPosition) {\n        this.canvas = document.getElementById(\"canvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.x = 0;\n        this.y = 0;\n        this.width = CELLSIZE;\n        this.height = CELLSIZE;\n        this.speed = Math.random() * .4 + .7\n        this.movement = this.speed;\n        this.health = 100;\n        this.maxHealth = this.health;\n\n    }\n\n    update() {\n        this.x += this.movement;\n    }\n\n    draw() {\n        this.ctx.fillStyle = \"black\";\n        this.ctx.fillRect(this.x, this.y, this.width, this.height);\n        this.ctx.fillStyle = \"orange\";\n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillText(Math.floor(this.health), this.x + 15, this.height + 30);\n        this.ctx.fillText(\"Naruto\", this.x + 15, this.y + 30);\n\n    }\n}\n\nexport default Naruto","import {game} from './scripts/game';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"canvas\");\n  canvas.width = 900;\n  canvas.height = 600;\n  const ctx = canvas.getContext(\"2d\");\n\n\n  game(canvas, ctx);\n\n})\n\n\n","// import { animate } from './utilities';\nimport Cell from \"./board\";\nimport Goku from \"./goku\";\nimport Naruto from './naruto';\nimport { createMap } from \"./utilities\";\n\nexport function game(canvas, ctx) {\n     const CELLSIZE = 50;\n     const CELLGAP = 3;\n     const GAMEGRID = [];\n     const GOKUS = [];\n     const NARUTOS = [];\n     const nPosition = []\n     let MONEY = 1000;\n     let frame = 0\n\n     // mouse\n     const mouse = {\n       x: undefined,\n       y: undefined,\n       width: 0.1,\n       height: 0.1,\n     };\n\n     canvas.addEventListener(\"mousemove\", function (e) {\n       mouse.x = e.offsetX;\n       mouse.y = e.offsetY;\n     });\n\n     canvas.addEventListener(\"mouseleave\", function () {\n       mouse.x = undefined;\n       mouse.y = undefined;\n     });\n     // board\n\n     function createGrid() {\n       for (let y = 0; y < canvas.height; y += CELLSIZE) {\n         for (let x = 0; x < canvas.width - CELLSIZE * 2; x += CELLSIZE) {\n           GAMEGRID.push(new Cell(x, y));\n         }\n       }\n     }\n\n     createGrid();\n\n     function handleGameGrid() {\n       for (let i = 0; i < GAMEGRID.length; i++) {\n         GAMEGRID[i].draw();\n       }\n     }\n\n     // projectiles\n\n     // gokus\n\n     canvas.addEventListener(\"click\", function () {\n       const gridPostitionX = mouse.x - (mouse.x % CELLSIZE);\n       const gridPostitionY = mouse.y - (mouse.y % CELLSIZE);\n       if (gridPostitionX > canvas.width - CELLSIZE * 3) return;\n       for (let i = 0; i < GOKUS.length; i++) {\n         if (GOKUS[i].x === gridPostitionX && GOKUS[i].y === gridPostitionY)\n           return;\n       }\n       let gokuCost = 250;\n       if (MONEY >= gokuCost) {\n         GOKUS.push(new Goku(gridPostitionX, gridPostitionY));\n         MONEY -= gokuCost;\n       }\n     });\n\n     function handleGokus() {\n       for (let i = 0; i < GOKUS.length; i++) {\n         GOKUS[i].draw();\n       }\n     }\n\n     // narutos\n\n     function handleNarutos() {\n        for (let i = 0; i < NARUTOS.length; i++) {\n            NARUTOS[i].update();\n            NARUTOS[i].draw();\n        }\n        if (frame % 200 === 0) {\n            let verticalPosition = Math.floor(Math.random() * 5 + 1) * CELLSIZE\n            NARUTOS.push(new Naruto(verticalPosition))\n            nPosition.push(verticalPosition);\n        }\n     }\n\n     // resources\n\n     // utilities\n\n     function handleGameStatus() {\n       if (MONEY > 400) {\n         ctx.fillStyle = \"green\";\n         ctx.font = \"15px Arial\";\n       } else {\n         ctx.fillStyle = \"red\";\n         ctx.font = \"15px Arial\";\n       }\n       ctx.fillText(\"Money: $\" + MONEY, 802, 30);\n     }\n\n     function animate() {\n       ctx.clearRect(0, 0, canvas.width, canvas.height);\n       ctx.fillStyle = \"lightgray\";\n       ctx.fillRect(\n         canvas.width - CELLSIZE * 2,\n         0,\n         CELLSIZE * 2,\n         canvas.height\n       );\n\n       createMap(ctx);\n       handleGameGrid();\n       handleGokus();\n       handleNarutos();\n       handleGameStatus(ctx);\n       frame++;       \n       requestAnimationFrame(animate);\n     }\n     animate();\n}\n\n\n// export default Game;"],"sourceRoot":""}